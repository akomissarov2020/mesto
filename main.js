(()=>{"use strict";class e{constructor(e,t,s,i,n,o,r){this._name=e.name,this._link=e.link,this._likes=e.likes.length,this._likesItems=e.likes,this._templateSelector=s,this._ownerId=t,this._cardOwnerId=e.owner._id,this._id=e._id,this._externalLikeHandler=n,this._externalDisikeHandler=o,this._handleCardClick=i,this._handleDeleteCard=r,this._openImageFunctionBunding=this._openImage.bind(this)}_deleteImage(e){this._handleDeleteCard(this._id,this)}deleteImage(){this._placeItem.remove(),this._placeItem=null}_toggleLike(e){e.target.classList.contains("elements__like_active")?this._externalDisikeHandler(this._id,this.setCardLikes.bind(this)):this._externalLikeHandler(this._id,this.setCardLikes.bind(this))}_openImage(e){this._handleCardClick(this._name,this._link)}_addEventListeners(){this._likeButton.addEventListener("click",this._toggleLike.bind(this)),this._placeItem.querySelector(".elements__trash-button").addEventListener("click",this._deleteImage.bind(this)),this._placeItem.querySelector(".elements__image").addEventListener("click",this._openImageFunctionBunding)}createPlace(){const e=document.querySelector(this._templateSelector).content;this._placeItem=e.querySelector(".elements__element").cloneNode(!0);const t=this._placeItem.querySelector(".elements__image"),s=this._placeItem.querySelector(".elements__text");return t.alt=this._name,t.src=this._link,s.textContent=this._name,this._likesElement=this._placeItem.querySelector(".elements__like-count"),this._likeButton=this._placeItem.querySelector(".elements__like"),this._removeButton=this._placeItem.querySelector(".elements__trash-button"),this.setCardLikes(this._likesItems),this._checkOwnLike(),this._checkMyCard(),this._addEventListeners(),this._placeItem}_checkOwnLike(){this._likesItems.some((e=>e._id===this._ownerId))?this._likeButton.classList.add("elements__like_active"):this._likeButton.classList.remove("elements__like_active")}setCardLikes(e){this._likesItems=e,this._likesElement.textContent=e.length,this._checkOwnLike()}_checkMyCard(){this._cardOwnerId!==this._ownerId&&this._hideRemoveButton()}_hideRemoveButton(){this._removeButton.classList.add("elements__trash-button_inactive")}}const t=document.querySelector(".profile__edit-button"),s=document.querySelector(".profile__add-button"),i=document.querySelector("[name='edit-profile-name']"),n=document.querySelector("[name='edit-profile-title']"),o=document.querySelector("[name='add-place']"),r=document.querySelector("[name='edit-profile']"),a=document.querySelector("[name='edit-avatar']"),h=document.querySelector(".profile__edit-avatar-button"),l={inputSelector:".form__field",submitButtonSelector:".form__save-button",inactiveButtonClass:"form__save-button_inactive",inputErrorClass:"form__field_invalid"};class _{constructor(e){this._popup=document.querySelector(e)}open(){this._popup.classList.remove("popup_hidden"),this._popup.classList.add("popup_opened"),this._setEventListeners()}_closeWithoutSubmit(e){if(e.target.classList.contains("popup")||e.target.classList.contains("popup__close-button"))return this.close(),!0}close(){this._popup.classList.remove("popup_opened"),this._removeEventListeners()}_handleEscClose(e){"Escape"===e.key&&this.close()}_setEventListeners(){this._onCloseBinding=this._closeWithoutSubmit.bind(this),this._onEscCloseBinding=this._handleEscClose.bind(this),this._popup.addEventListener("click",this._onCloseBinding),document.addEventListener("keydown",this._onEscCloseBinding)}_removeEventListeners(){this._popup.removeEventListener("click",this._onCloseBinding),document.removeEventListener("keydown",this._onEscCloseBinding)}}class c extends _{constructor(e,t,s){super(e),this._submitCallback=s,this._form=this._popup.querySelector(".form"),this._inputList=this._form.querySelectorAll(".form__field"),this._saveButton=this._form.querySelector(".form__save-button"),this._saveButtonDefaultText=this._saveButton.textContent,this._formValidator=t,this._formValidator.enableValidation()}open(){this._formValidator.toggleButtonState(),super.open()}_onSubmit(e){e.preventDefault(),this._setLoadingStatus("loading"),this._submitCallback(this._getInputValues()).then((e=>{this.close()})).catch((e=>{console.log(e),this._setLoadingStatus("error")})).finally((e=>{this._setLoadingStatus("default")}))}close(){this._form.reset(),this._formValidator.clearErrors(),this._setLoadingStatus("default"),super.close()}_setEventListeners(){this._onSubmitBinding=this._onSubmit.bind(this),this._form.addEventListener("submit",this._onSubmitBinding),super._setEventListeners()}_removeEventListeners(){this._form.removeEventListener("submit",this._onSubmitBinding),super._removeEventListeners()}_setLoadingStatus(e){this._saveButton.textContent="loading"===e?"Сохранение...":"default"===e?this._saveButtonDefaultText:"Ошибка"}_getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}}class u{constructor(e,t){this._formElement=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass}_showInputError(e,t){const s=this._formElement.querySelector(`.${e.name}-error`);e.classList.add(this._inputErrorClass),s.textContent=t}_hideInputError(e){const t=this._formElement.querySelector(`.${e.name}-error`);e.classList.remove(this._inputErrorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_setEventListeners(){this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this.toggleButtonState(this._inputList,this._buttonElement),this._inputList.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonState(this._buttonElement)}))}))}clearErrors(){this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._setEventListeners()}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}}function d(t){return new e(t,k,"#place",E.open.bind(E),m,p,v).createPlace()}function m(e,t){g.putLike(e).then((e=>{t(e.likes)})).catch((e=>{console.log(e)}))}function p(e,t){g.deleteLike(e).then((e=>{t(e.likes)})).catch((e=>{console.log(e)}))}function f(e){return new Promise((function(t,s){g.deletePhoto(e).then((e=>{t(e)})).catch((e=>{s(e)}))}))}function v(e,t){I.open(e,t,f)}let k=null;const g=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers={authorization:e.headers.authorization,"Content-Type":e.headers["Content-Type"]}}getInitialCards(){return fetch(`${this._baseUrl}cards`,{method:"GET",headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}updateUserInfo(e){return fetch(`${this._baseUrl}users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.info})}).then(this._checkResponse)}insertNewCard(e){return fetch(`${this._baseUrl}cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkResponse)}putLike(e){return fetch(`${this._baseUrl}cards/likes/${e}`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}deleteLike(e){return fetch(`${this._baseUrl}cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}updateAvatar(e){return fetch(`${this._baseUrl}users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.link})}).then(this._checkResponse)}deletePhoto(e){return fetch(`${this._baseUrl}cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}}({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-26/",headers:{authorization:"05e586ce-c0c8-4f14-bbd3-b259a470e2b4","Content-Type":"application/json"}}),S=new class{constructor({items:e,renderer:t},s){this._renderedItems=e,this._renderer=t,this._container=document.querySelector(s)}renderItems(e){this._clear(),this._renderedItems=e,this._renderedItems.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}_clear(){this._container.innerHTML=""}}({items:[],renderer:e=>{S.addItem(e)}},".elements"),b=new Promise((function(e,t){g.getUserInfo().then((t=>{C.setUserInfo(t),k=t._id,e(t)})).catch((e=>{t(e)}))})),L=new Promise((function(e,t){g.getInitialCards().then((t=>{const s=[];t.forEach((e=>{const t=d(e);s.push(t)})),e(s)})).catch((e=>{t(e)}))}));Promise.all([b,L]).then((e=>{const t=e[1];S.renderItems(t)}));const E=new class extends _{constructor(e){super(e),this._popupTitle=this._popup.querySelector(".popup__image-text"),this._popupImage=this._popup.querySelector(".popup__image")}open(e,t){this._popupImage.src=t,this._popupImage.alt=e,this._popupTitle.textContent=e,super.open()}}(".popup_type_view"),I=new class extends _{constructor(e){super(e),this._form=this._popup.querySelector(".form"),this._deleteCardFunctionBunding=this._deleteCard.bind(this),this._saveButton=this._form.querySelector(".form__save-button"),this._saveButtonDefaultText=this._saveButton.textContent}open(e,t,s){super.open(),this._id=e,this._card=t,this._form.addEventListener("submit",this._deleteCardFunctionBunding),this._apiCallback=s}_deleteCard(e){e.preventDefault(),this._setLoadingStatus("loading"),this._apiCallback(this._id).then((e=>{this._card.deleteImage(),this.close()})).catch((e=>{console.log(e),this._setLoadingStatus("error")})).finally((e=>{this._setLoadingStatus("default")}))}_setLoadingStatus(e){this._saveButton.textContent="loading"===e?"Удаление...":"default"===e?this._saveButtonDefaultText:"Ошибка"}close(){super.close(),this._setLoadingStatus("default")}_closeWithoutSubmit(e){super._closeWithoutSubmit(e)&&this._form.removeEventListener("submit",this._deleteCardFunctionBunding)}}(".popup_type_with-confirm"),C=new class{constructor({nameSelector:e,infoSelector:t,avatarSelector:s}){this._name=document.querySelector(e),this._info=document.querySelector(t),this._avatar=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent.trim(),info:this._info.textContent.trim()}}setUserInfo({name:e,about:t,avatar:s}){this._name.textContent=e,this._info.textContent=t,this._avatar.src=s}}({nameSelector:".profile__name",infoSelector:".profile__title",avatarSelector:".profile__avatar"}),y=new c(".popup_type_edit-profile",new u(l,r),(function(e){return new Promise((function(t,s){const i=e["edit-profile-name"],n=e["edit-profile-title"];g.updateUserInfo({name:i,info:n}).then((e=>{C.setUserInfo(e),t(e)})).catch((e=>{s(e)}))}))}));t.addEventListener("click",(function(e){const{name:t,info:s}=C.getUserInfo();i.value=t,n.value=s,y.open()}));const B=new c(".popup_type_add-place",new u(l,o),(function(e){return t={name:e["add-place-name"],link:e["add-place-link"]},new Promise((function(e,s){g.insertNewCard(t).then((t=>{const s=d(t);S.prependItem(s),e(t)})).catch((e=>{s(e)}))}));var t}));s.addEventListener("click",(function(e){B.open()}));const w=new c(".popup_type_edit-avatar",new u(l,a),(function(e){return new Promise((function(t,s){const i=e["avatar-link"];g.updateAvatar({link:i}).then((e=>{C.setUserInfo(e),t(e)})).catch((e=>{s(e)}))}))}));h.addEventListener("click",(function(e){w.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,